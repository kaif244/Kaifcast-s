const API_KEY = "d685bc78d49a4b97abf131720251106"; // Your API Key
const weatherResult = document.getElementById("weatherResult");
const forecastResult = document.getElementById("forecastResult");
const hourlyForecastResult = document.getElementById("hourlyForecastResult");
const themeToggle = document.getElementById("themeToggle");
const micBtn = document.getElementById("micBtn");
const datetimeEl = document.getElementById("datetime");
const locationInput = document.getElementById("locationInput");
const languageSelect = document.getElementById("languageSelect");
const unitToggle = document.getElementById("unitToggle");
const loadingSpinner = document.getElementById("loadingSpinner");

// --- Translations Object ---
const translations = {
  en: {
    AppName: "ClimaCast тЬи", // Updated
    EnterCity: "ЁЯМЖ Enter city",
    Search: "ЁЯФН",
    Language: "Language:",
    DarkMode: "ЁЯМЩ Dark Mode",
    Units: "┬░C/┬░F",
    Voice: "ЁЯОд Voice",
    UseMyLocation: "ЁЯУН Use My Location",
    PleaseEnterCity: "тЪая╕П Please enter a city or use your location.",
    ErrorFetchingData: "тЪая╕П Unable to fetch data. Please check your internet connection or try again later.",
    GeolocationError: "тЭМ Geolocation error: {error}. Please allow location access.",
    GeolocationNotSupported: "тЪая╕П Geolocation is not supported by this browser.",
    VoiceInputNotSupported: "ЁЯОд Voice input not supported by your browser. Try Chrome or Edge.",
    VoiceInputError: "ЁЯОд Voice input error: {error}. Please try again.",
    Listening: "ЁЯОд Listening...",
    Temperature: "Temperature",
    Condition: "Condition",
    FeelsLike: "Feels Like",
    Sunrise: "Sunrise",
    Sunset: "Sunset",
    DayForecast: "7-Day Forecast",
    HourlyForecast: "Hourly Forecast",
    ForecastFor: "Forecast for",
    Humidity: "Humidity",
    Wind: "Wind",
    Pressure: "Pressure",
    Visibility: "Visibility",
    UVIndex: "UV Index",
    Precipitation: "Precipitation",
    MoonPhase: "Moon Phase",
    Moonrise: "Moonrise",
    Moonset: "Moonset",
    CurrentWeatherFor: "Current Weather for",
    Today: "Today",
    Day: "Day",
    Night: "Night",
    MaxTemp: "Max Temp",
    MinTemp: "Min Temp",
    AvgTemp: "Avg Temp",
    chanceOfRain: "Chance of Rain",
    chanceOfSnow: "Chance of Snow"
  },
  hi: {
    AppName: "рдХреНрд▓рд╛рдЗрдорд╛рдХрд╛рд╕реНрдЯ тЬи", // Updated
    EnterCity: "ЁЯМЖ рд╢рд╣рд░ рджрд░реНрдЬ рдХрд░реЗрдВ",
    Search: "ЁЯФН",
    Language: "рднрд╛рд╖рд╛:",
    DarkMode: "ЁЯМЩ рдбрд╛рд░реНрдХ рдореЛрдб",
    Units: "┬░C/┬░F",
    Voice: "ЁЯОд рдЖрд╡рд╛рдЬрд╝",
    UseMyLocation: "ЁЯУН рдореЗрд░рд╛ рд╕реНрдерд╛рди рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ",
    PleaseEnterCity: "тЪая╕П рдХреГрдкрдпрд╛ рдПрдХ рд╢рд╣рд░ рджрд░реНрдЬ рдХрд░реЗрдВ рдпрд╛ рдЕрдкрдирд╛ рд╕реНрдерд╛рди рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
    ErrorFetchingData: "тЪая╕П рдбреЗрдЯрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рдЕрд╕рдорд░реНрдеред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдЗрдВрдЯрд░рдиреЗрдЯ рдХрдиреЗрдХреНрд╢рди рдЬрд╛рдВрдЪреЗрдВ рдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
    GeolocationError: "тЭМ рдЬрд┐рдпреЛрд▓реЛрдХреЗрд╢рди рддреНрд░реБрдЯрд┐: {error}ред рдХреГрдкрдпрд╛ рд╕реНрдерд╛рди рдкрд╣реБрдВрдЪ рдХреА рдЕрдиреБрдорддрд┐ рджреЗрдВред",
    GeolocationNotSupported: "тЪая╕П рдпрд╣ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдЬрд┐рдпреЛрд▓реЛрдХреЗрд╢рди рдХрд╛ рд╕рдорд░реНрдерди рдирд╣реАрдВ рдХрд░рддрд╛ рд╣реИред",
    VoiceInputNotSupported: "ЁЯОд рдЖрдкрдХрд╛ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдзреНрд╡рдирд┐ рдЗрдирдкреБрдЯ рдХрд╛ рд╕рдорд░реНрдерди рдирд╣реАрдВ рдХрд░рддрд╛ рд╣реИред рдХреНрд░реЛрдо рдпрд╛ рдПрдЬ рдЖрдЬрд╝рдорд╛рдПрдБред",
    VoiceInputError: "ЁЯОд рдзреНрд╡рдирд┐ рдЗрдирдкреБрдЯ рддреНрд░реБрдЯрд┐: {error}ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
    Listening: "ЁЯОд рд╕реБрди рд░рд╣рд╛ рд╣реВрдБ...",
    Temperature: "рддрд╛рдкрдорд╛рди",
    Condition: "рд╕реНрдерд┐рддрд┐",
    FeelsLike: "рдЬреИрд╕рд╛ рдорд╣рд╕реВрд╕ рд╣реЛрддрд╛ рд╣реИ",
    Sunrise: "рд╕реВрд░реНрдпреЛрджрдп",
    Sunset: "рд╕реВрд░реНрдпрд╛рд╕реНрдд",
    DayForecast: "7-рджрд┐рд╡рд╕реАрдп рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
    HourlyForecast: "рдкреНрд░рддрд┐ рдШрдВрдЯрд╛ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
    ForecastFor: "рдХреЗ рд▓рд┐рдП рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
    Humidity: "рдирдореА",
    Wind: "рд╣рд╡рд╛",
    Pressure: "рджрдмрд╛рд╡",
    Visibility: "рджреГрд╢реНрдпрддрд╛",
    UVIndex: "рдпреВрд╡реА рд╕реВрдЪрдХрд╛рдВрдХ",
    Precipitation: "рд╡рд░реНрд╖рд╛",
    MoonPhase: "рдЪрдВрджреНрд░рдорд╛ рдХрд╛ рдЪрд░рдг",
    Moonrise: "рдЪрдВрджреНрд░реЛрджрдп",
    Moonset: "рдЪрдВрджреНрд░рд╛рд╕реНрдд",
    CurrentWeatherFor: "рдХреЗ рд▓рд┐рдП рд╡рд░реНрддрдорд╛рди рдореМрд╕рдо",
    Today: "рдЖрдЬ",
    Day: "рджрд┐рди",
    Night: "рд╢рдкреЗ",
    MaxTemp: "рдЕрдзрд┐рдХрддрдо рддрд╛рдкрдорд╛рди",
    MinTemp: "рдиреНрдпреВрдирддрдо рддрд╛рдкрдорд╛рди",
    AvgTemp: "рдФрд╕рдд рддрд╛рдкрдорд╛рди",
    chanceOfRain: "рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛",
    chanceOfSnow: "рдмрд░реНрдлрдмрд╛рд░реА рдХреА рд╕рдВрднрд╛рд╡рдирд╛"
  },
  ur: {
    AppName: "┌й┘Д╪з╪ж┘Е╪з┌й╪з╪│┘╣ тЬи", // Updated
    EnterCity: "ЁЯМЖ ╪┤█Б╪▒ ╪п╪▒╪м ┌й╪▒█М┌║",
    Search: "ЁЯФН",
    Language: "╪▓╪и╪з┘Ж:",
    DarkMode: "ЁЯМЩ ┌И╪з╪▒┌й ┘Е┘И┌И",
    Units: "┬░C/┬░F",
    Voice: "ЁЯОд ╪в┘И╪з╪▓",
    UseMyLocation: "ЁЯУН ┘Е█М╪▒╪з ┘Е┘В╪з┘Е ╪з╪│╪к╪╣┘Е╪з┘Д ┌й╪▒█М┌║",
    PleaseEnterCity: "тЪая╕П ╪и╪▒╪з█Б ┌й╪▒┘Е ╪з█М┌й ╪┤█Б╪▒ ╪п╪▒╪м ┌й╪▒█М┌║ █М╪з ╪з┘╛┘Ж╪з ┘Е┘В╪з┘Е ╪з╪│╪к╪╣┘Е╪з┘Д ┌й╪▒█М┌║█Ф",
    ErrorFetchingData: "тЪая╕П ┌И█М┘╣╪з ╪н╪з╪╡┘Д ┌й╪▒┘Ж█Т ╪│█Т ┘В╪з╪╡╪▒ █Б█Т█Ф ╪и╪▒╪з█Б ┌й╪▒┘Е ╪з┘╛┘Ж╪з ╪з┘Ж┘╣╪▒┘Ж█М┘╣ ┌й┘Ж┌й╪┤┘Ж ┌Ж█М┌й ┌й╪▒█М┌║ █М╪з ╪и╪╣╪п ┘Е█М┌║ ╪п┘И╪и╪з╪▒█Б ┌й┘И╪┤╪┤ ┌й╪▒█М┌║█Ф",
    GeolocationError: "тЭМ ╪м╪║╪▒╪з┘Б█М╪з╪ж█М ┘Е╪н┘Д ┘И┘В┘И╪╣ ┌й█М ╪о╪▒╪з╪и█М: {error}█Ф ╪и╪▒╪з█Б ┌й╪▒┘Е ┘Е┘В╪з┘Е ╪к┌й ╪▒╪│╪з╪ж█М ┌й█М ╪з╪м╪з╪▓╪к ╪п█М┌║█Ф",
    GeolocationNotSupported: "тЪая╕П █М█Б ╪и╪▒╪з╪д╪▓╪▒ ╪м╪║╪▒╪з┘Б█М╪з╪ж█М ┘Е╪н┘Д ┘И┘В┘И╪╣ ┌й█М ╪н┘Е╪з█М╪к ┘Ж█Б█М┌║ ┌й╪▒╪к╪з █Б█Т█Ф",
    VoiceInputNotSupported: "ЁЯОд ╪в┘╛ ┌й╪з ╪и╪▒╪з╪д╪▓╪▒ ╪в┘И╪з╪▓ ┌й█М ╪з┘Ж ┘╛┘╣ ┌й█М ╪н┘Е╪з█М╪к ┘Ж█Б█М┌║ ┌й╪▒╪к╪з █Б█Т█Ф ┌й╪▒┘И┘Е █М╪з ╪з█М╪м ╪в╪▓┘Е╪з╪ж█М┌║█Ф",
    VoiceInputError: "ЁЯОд ╪в┘И╪з╪▓ ┌й█М ╪з┘Ж ┘╛┘╣ ╪о╪▒╪з╪и█М: {error}█Ф ╪и╪▒╪з█Б ┌й╪▒┘Е ╪п┘И╪и╪з╪▒█Б ┌й┘И╪┤╪┤ ┌й╪▒█М┌║█Ф",
    Listening: "ЁЯОд ╪│┘Ж ╪▒█Б╪з █Б┘И┌║...",
    Temperature: "╪п╪▒╪м█Б ╪н╪▒╪з╪▒╪к",
    Condition: "╪н╪з┘Д╪к",
    FeelsLike: "┘Е╪н╪│┘И╪│ █Б┘И╪к╪з █Б█Т",
    Sunrise: "╪╖┘Д┘И╪╣ ╪в┘Б╪к╪з╪и",
    Sunset: "╪║╪▒┘И╪и ╪в┘Б╪к╪з╪и",
    DayForecast: "7-╪▒┘И╪▓█Б ╪з┘Ж╪п╪з╪▓█Б",
    HourlyForecast: "┌п┌╛┘Ж┘╣█Б ┘И╪з╪▒ ┘╛█М╪┤ ┌п┘И╪ж█М",
    ForecastFor: "┌й█Т ┘Д█М█Т ┘╛█М╪┤ ┌п┘И╪ж█М",
    Humidity: "┘Ж┘Е█М",
    Wind: "█Б┘И╪з",
    Pressure: "╪п╪и╪з╪д",
    Visibility: "┘Е╪▒╪ж█М╪к",
    UVIndex: "█М┘И┘И█М ╪з┘Ж┌И█М┌й╪│",
    Precipitation: "╪и╪з╪▒╪┤",
    MoonPhase: "┌Ж╪з┘Ж╪п ┌й╪з ┘Е╪▒╪н┘Д█Б",
    Moonrise: "┌Ж╪з┘Ж╪п ┌й╪з ╪╖┘Д┘И╪╣",
    Moonset: "┌Ж╪з┘Ж╪п ┌й╪з ╪║╪▒┘И╪и",
    CurrentWeatherFor: "┌й█Т ┘Д█М█Т ┘Е┘И╪м┘И╪п█Б ┘Е┘И╪│┘Е",
    Today: "╪в╪м",
    Day: "╪п┘Ж",
    Night: "╪┤┘╛┘З",
    MaxTemp: "╪▓█М╪з╪п█Б ╪│█Т ╪▓█М╪з╪п█Б ╪п╪▒╪м█Б ╪н╪▒╪з╪▒╪к",
    MinTemp: "┌й┘Е ╪│█Т ┌й┘Е ╪п╪▒╪м█Б ╪н╪▒╪з╪▒╪к",
    AvgTemp: "╪з┘И╪│╪╖ ╪п╪▒╪м█Б ╪н╪▒╪з╪▒╪к",
    chanceOfRain: "╪и╪з╪▒╪┤ ┌й╪з ╪з┘Е┌й╪з┘Ж",
    chanceOfSnow: "╪и╪▒┘Б╪и╪з╪▒█М ┌й╪з ╪з┘Е┌й╪з┘Ж"
  },
  ps: {
    AppName: "┌й┘Д╪з╪ж┘Е╪з┌й╪з╪│┘╣ тЬи", // Updated
    EnterCity: "ЁЯМЖ ┌Ъ╪з╪▒ ╪п┘Ж┘Ж┘З ┌й┌У╪ж",
    Search: "ЁЯФН",
    Language: "┌Ш╪и┘З:",
    DarkMode: "ЁЯМЩ ╪к█М╪з╪▒┘З ╪н╪з┘Д╪к",
    Units: "┬░C/┬░F",
    Voice: "ЁЯОд ╪║┌Ц",
    UseMyLocation: "ЁЯУН ╪▓┘Е╪з ┘Е┘И┘В╪╣█М╪к ┘И┌й╪з╪▒┘И╪ж",
    PleaseEnterCity: "тЪая╕П ┘Е┘З╪▒╪и╪з┘Ж┘К ┘И┌й┌У╪ж █М┘И ┌Ъ╪з╪▒ ╪п┘Ж┘Ж┘З ┌й┌У╪ж █М╪з ╪о┘╛┘Д ┘Е┘И┘В╪╣█М╪к ┘И┌й╪з╪▒┘И╪ж.",
    ErrorFetchingData: "тЪая╕П ╪п ┘Е╪╣┘Д┘И┘Е╪з╪к┘И ╪к╪▒┘Д╪з╪│┘З ┌й┘И┘Д┘И ┌й█Р ┘╛╪з╪к█Р ╪▒╪з╪║┘Д┘К. ┘Е┘З╪▒╪и╪з┘Ж┘К ┘И┌й┌У╪ж ╪о┘╛┘Д ╪з┘Ж┘╝╪▒┘Ж█М┘╝ ╪з┌У█М┌й┘З ┘И┌л┘И╪▒╪ж █М╪з ┘И╪▒┘И╪│╪к┘З ╪и█М╪з ┘З┌Е┘З ┘И┌й┌У╪ж.",
    GeolocationError: "тЭМ ╪п ╪м╪║╪▒╪з┘Б█М╪з█М┘К ┘Е┘И┘В╪╣█М╪к ╪к█Р╪▒┘И╪к┘Ж┘З: {error}. ┘Е┘З╪▒╪и╪з┘Ж┘К ┘И┌й┌У╪ж ╪п ┘Е┘И┘В╪╣█М╪к ┘Д╪з╪│╪▒╪│┘К ╪к┘З ╪з╪м╪з╪▓┘З ┘И╪▒┌й┌У╪ж.",
    GeolocationNotSupported: "тЪая╕П ╪п╪з ╪и╪▒╪з┘И╪▓╪▒ ╪м╪║╪▒╪з┘Б█М╪з█М┘К ┘Е┘И┘В╪╣█М╪к ┘Ж┘З ┘Е┘Д╪з╪к┌У ┌й┘И┘К.",
    VoiceInputNotSupported: "ЁЯОд ╪│╪к╪з╪│┘И ╪и╪▒╪з┘И╪▓╪▒ ╪п ╪║┌Ц ╪п╪з╪о┘Д┘И┘Д┘И ┘Е┘Д╪з╪к┌У ┘Ж┘З ┌й┘И┘К. ┌й╪▒┘И┘Е █М╪з ╪з█М╪м ┘З┌Е┘З ┘И┌й┌У╪ж.",
    VoiceInputError: "ЁЯОд ╪п ╪║┌Ц ╪п╪з╪о┘Д┘И┘Д┘И ╪к█Р╪▒┘И╪к┘Ж┘З: {error}. ┘Е┘З╪▒╪и╪з┘Ж┘К ┘И┌й┌У╪ж ╪и█М╪з ┘З┌Е┘З ┘И┌й┌У╪ж.",
    Listening: "ЁЯОд ╪з┘И╪▒█М╪п┘Д...",
    Temperature: "╪к┘И╪п┘И╪о┘З",
    Condition: "╪н╪з┘Д╪к",
    FeelsLike: "╪п╪з╪│█Р ╪з╪н╪│╪з╪│ ┌й█М┌Ц┘К",
    Sunrise: "┘Д┘Е╪▒ ╪о╪з╪к┘З",
    Sunset: "┘Д┘Е╪▒ ┘Д┘И█М╪п┘И",
    DayForecast: "7-┘И╪▒┌Б┘Ж█Н ┘И┌У╪з┘Ж╪п┘И█М┘Ж┘З",
    HourlyForecast: "╪│╪з╪╣╪к ┘И╪з╪▒ ┘И┌У╪з┘Ж╪п┘И┘К┘Ж┘З",
    ForecastFor: "┘Д┘╛╪з╪▒┘З ┘И┌У╪з┘Ж╪п┘И█М┘Ж┘З",
    Humidity: "╪▒╪╖┘И╪и╪к",
    Wind: "╪и╪з╪п",
    Pressure: "┘Б╪┤╪з╪▒",
    Visibility: "┘Д█М╪п",
    UVIndex: "UV ╪┤╪з╪о╪╡",
    Precipitation: "╪и╪з╪▒╪з┘Ж",
    MoonPhase: "╪п ╪│┘╛┘И┌Ц┘Е█Н ┘Е╪▒╪н┘Д┘З",
    Moonrise: "╪п ╪│┘╛┘И┌Ц┘Е█Н ╪▒╪з╪о╪к┘Д",
    Moonset: "╪п ╪│┘╛┘И┌Ц┘Е█Н ┘╛╪▒█М┘И╪к┘Д",
    CurrentWeatherFor: "┘Д┘╛╪з╪▒┘З ╪з┘И╪│┘Ж█Н ┘З┘И╪з",
    Today: "┘Ж┘Ж",
    Day: "┘И╪▒┌Б",
    Night: "╪┤┘╛┘З",
    MaxTemp: "╪з╪╣╪╕┘Е┘К ╪к┘И╪п┘И╪о┘З",
    MinTemp: "┘Д┌Ц╪к╪▒┘Д┌Ц┘З ╪к┘И╪п┘И╪о┘З",
    AvgTemp: "╪з┘И╪│╪╖ ╪к┘И╪п┘И╪о┘З",
    chanceOfRain: "╪п ╪и╪з╪▒╪з┘Ж ╪з╪н╪к┘Е╪з┘Д",
    chanceOfSnow: "╪п ┘И╪з┘И╪▒█Р ╪з╪н╪к┘Е╪з┘Д"
  },
  mr: { // Marathi translations
    AppName: "рдХреНрд▓рд╛рдЗрдорд╛рдХрд╛рд╕реНрдЯ тЬи", // Updated
    EnterCity: "ЁЯМЖ рд╢рд╣рд░ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛",
    Search: "ЁЯФН",
    Language: "рднрд╛рд╖рд╛:",
    DarkMode: "ЁЯМЩ рдЧрдбрдж рдореЛрдб",
    Units: "┬░C/┬░F",
    Voice: "ЁЯОд рдЖрд╡рд╛рдЬ",
    UseMyLocation: "ЁЯУН рдорд╛рдЭреЗ рд╕реНрдерд╛рди рд╡рд╛рдкрд░рд╛",
    PleaseEnterCity: "тЪая╕П рдХреГрдкрдпрд╛ рд╢рд╣рд░ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛ рдХрд┐рдВрд╡рд╛ рдЖрдкрд▓реЗ рд╕реНрдерд╛рди рд╡рд╛рдкрд░рд╛.",
    ErrorFetchingData: "тЪая╕П рдбреЗрдЯрд╛ рдорд┐рд│рд╡рд┐рдгреНрдпрд╛рдд рдЕрдХреНрд╖рдо. рдХреГрдкрдпрд╛ рдЖрдкрд▓реЗ рдЗрдВрдЯрд░рдиреЗрдЯ рдХрдиреЗрдХреНрд╢рди рддрдкрд╛рд╕рд╛ рдХрд┐рдВрд╡рд╛ рдирдВрддрд░ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.",
    GeolocationError: "тЭМ рднреМрдЧреЛрд▓рд┐рдХ рд╕реНрдерд╛рди рддреНрд░реБрдЯреА: {error}. рдХреГрдкрдпрд╛ рд╕реНрдерд╛рди рдкреНрд░рд╡реЗрд╢рд╛рдЪреА рдкрд░рд╡рд╛рдирдЧреА рджреНрдпрд╛.",
    GeolocationNotSupported: "тЪая╕П рдпрд╛ рдмреНрд░рд╛рдЙрдЭрд░рдордзреНрдпреЗ рднреМрдЧреЛрд▓рд┐рдХ рд╕реНрдерд╛рди рд╕рдорд░реНрдерд┐рдд рдирд╛рд╣реА.",
    VoiceInputNotSupported: "ЁЯОд рдЖрдкрд▓реНрдпрд╛ рдмреНрд░рд╛рдЙрдЭрд░рдордзреНрдпреЗ рдЖрд╡рд╛рдЬ рдЗрдирдкреБрдЯ рд╕рдорд░реНрдерд┐рдд рдирд╛рд╣реА. рдХреНрд░реЛрдо рдХрд┐рдВрд╡рд╛ рдПрдЬ рд╡рд╛рдкрд░реВрди рдкрд╣рд╛.",
    VoiceInputError: "ЁЯОд рдЖрд╡рд╛рдЬ рдЗрдирдкреБрдЯ рддреНрд░реБрдЯреА: {error}. рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.",
    Listening: "ЁЯОд рдРрдХрдд рдЖрд╣реЗ...",
    Temperature: "рддрд╛рдкрдорд╛рди",
    Condition: "рд╕реНрдерд┐рддреА",
    FeelsLike: "рдЕрд╕реЗ рд╡рд╛рдЯрддреЗ",
    Sunrise: "рд╕реВрд░реНрдп рдЙрдЧрд╡рдгреЗ",
    Sunset: "рд╕реВрд░реНрдп рдорд╛рд╡рд│рдгреЗ",
    DayForecast: "7-рджрд┐рд╡рд╕рд╛рдВрдЪрд╛ рдЕрдВрджрд╛рдЬ",
    HourlyForecast: "рддрд╛рд╕рднрд░рд╛рдЪрд╛ рдЕрдВрджрд╛рдЬ",
    ForecastFor: "рд╕рд╛рдареА рдЕрдВрджрд╛рдЬ",
    Humidity: "рдЖрд░реНрджреНрд░рддрд╛",
    Wind: "рд╡рд╛рд░рд╛",
    Pressure: "рджрд╛рдм",
    Visibility: "рджреГрд╢реНрдпрдорд╛рдирддрд╛",
    UVIndex: "рдпреВрд╡реНрд╣реА рдирд┐рд░реНрджреЗрд╢рд╛рдВрдХ",
    Precipitation: "рдкрд╛рдКрд╕",
    MoonPhase: "рдЪрдВрджреНрд░рд╛рдЪреА рдХрд▓рд╛",
    Moonrise: "рдЪрдВрджреНрд░реЛрджрдп",
    Moonset: "рдЪрдВрджреНрд░рд╛рд╕реНрдд",
    CurrentWeatherFor: "рд╕рд╛рдареА рд╕рдзреНрдпрд╛рдЪреЗ рд╣рд╡рд╛рдорд╛рди",
    Today: "рдЖрдЬ",
    Day: "рджрд┐рд╡рд╕",
    Night: "рд░рд╛рддреНрд░",
    MaxTemp: "рдЬрд╛рд╕реНрддреАрдд рдЬрд╛рд╕реНрдд рддрд╛рдкрдорд╛рди",
    MinTemp: "рдХрд┐рдорд╛рди рддрд╛рдкрдорд╛рди",
    AvgTemp: "рд╕рд░рд╛рд╕рд░реА рддрд╛рдкрдорд╛рди",
    chanceOfRain: "рдкрд╛рд╡рд╕рд╛рдЪреА рд╢рдХреНрдпрддрд╛",
    chanceOfSnow: "рдмрд░реНрдлрд╛рдЪреА рд╢рдХреНрдпрддрд╛"
  },
  ar: { // Arabic translations
    AppName: "┘Г┘Д╪з╪ж┘Е╪з┘Г╪з╪│┘╣ тЬи", // Updated
    EnterCity: "ЁЯМЖ ╪г╪п╪о┘Д ╪з┘Д┘Е╪п┘К┘Ж╪й",
    Search: "ЁЯФН",
    Language: "╪з┘Д┘Д╪║╪й:",
    DarkMode: "ЁЯМЩ ╪з┘Д┘И╪╢╪╣ ╪з┘Д╪п╪з┘Г┘Ж",
    Units: "┬░C/┬░F",
    Voice: "ЁЯОд ╪╡┘И╪к",
    UseMyLocation: "ЁЯУН ╪з╪│╪к╪о╪п╪з┘Е ┘Е┘И┘В╪╣┘К",
    PleaseEnterCity: "тЪая╕П ┘К╪▒╪м┘Й ╪е╪п╪о╪з┘Д ┘Е╪п┘К┘Ж╪й ╪г┘И ╪з╪│╪к╪о╪п╪з┘Е ┘Е┘И┘В╪╣┘Г.",
    ErrorFetchingData: "тЪая╕П ╪к╪╣╪░╪▒ ╪м┘Д╪и ╪з┘Д╪и┘К╪з┘Ж╪з╪к. ┘К╪▒╪м┘Й ╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ╪з╪к╪╡╪з┘Д┘Г ╪и╪з┘Д╪е┘Ж╪к╪▒┘Ж╪к ╪г┘И ╪з┘Д┘Е╪н╪з┘И┘Д╪й ┘Е╪▒╪й ╪г╪о╪▒┘Й ┘Д╪з╪н┘В┘Л╪з.",
    GeolocationError: "тЭМ ╪о╪╖╪г ┘Б┘К ╪к╪н╪п┘К╪п ╪з┘Д┘Е┘И┘В╪╣ ╪з┘Д╪м╪║╪▒╪з┘Б┘К: {error}. ┘К╪▒╪м┘Й ╪з┘Д╪│┘Е╪з╪н ╪и╪з┘Д┘И╪╡┘И┘Д ╪е┘Д┘Й ╪з┘Д┘Е┘И┘В╪╣.",
    GeolocationNotSupported: "тЪая╕П ┘Д╪з ┘К╪п╪╣┘Е ┘З╪░╪з ╪з┘Д┘Е╪к╪╡┘Б╪н ╪к╪н╪п┘К╪п ╪з┘Д┘Е┘И┘В╪╣ ╪з┘Д╪м╪║╪▒╪з┘Б┘К.",
    VoiceInputNotSupported: "ЁЯОд ╪е╪п╪о╪з┘Д ╪з┘Д╪╡┘И╪к ╪║┘К╪▒ ┘Е╪п╪╣┘И┘Е ┘Е┘Ж ┘Е╪к╪╡┘Б╪н┘Г. ╪м╪▒╪и ┘Г╪▒┘И┘Е ╪г┘И ╪е┘К╪п╪м.",
    VoiceInputError: "ЁЯОд ╪о╪╖╪г ┘Б┘К ╪е╪п╪о╪з┘Д ╪з┘Д╪╡┘И╪к: {error}. ┘К╪▒╪м┘Й ╪з┘Д┘Е╪н╪з┘И┘Д╪й ┘Е╪▒╪й ╪г╪о╪▒┘Й.",
    Listening: "ЁЯОд ╪м╪з╪▒┘К ╪з┘Д╪з╪│╪к┘Е╪з╪╣...",
    Temperature: "╪п╪▒╪м╪й ╪з┘Д╪н╪▒╪з╪▒╪й",
    Condition: "╪з┘Д╪н╪з┘Д╪й",
    FeelsLike: "┘К╪и╪п┘И ┘И┘Г╪г┘Ж",
    Sunrise: "╪┤╪▒┘И┘В ╪з┘Д╪┤┘Е╪│",
    Sunset: "╪║╪▒┘И╪и ╪з┘Д╪┤┘Е╪│",
    DayForecast: "╪к┘И┘В╪╣╪з╪к 7 ╪г┘К╪з┘Е",
    HourlyForecast: "╪к┘И┘В╪╣╪з╪к ┘Г┘Д ╪│╪з╪╣╪й",
    ForecastFor: "╪к┘И┘В╪╣╪з╪к ┘Д┘А",
    Humidity: "╪з┘Д╪▒╪╖┘И╪и╪й",
    Wind: "╪з┘Д╪▒┘К╪з╪н",
    Pressure: "╪з┘Д╪╢╪║╪╖",
    Visibility: "╪з┘Д╪▒╪д┘К╪й",
    UVIndex: "┘Е╪д╪┤╪▒ ╪з┘Д╪г╪┤╪╣╪й ┘Б┘И┘В ╪з┘Д╪и┘Ж┘Б╪│╪м┘К╪й",
    Precipitation: "┘З╪╖┘И┘Д ╪з┘Д╪г┘Е╪╖╪з╪▒",
    MoonPhase: "╪╖┘И╪▒ ╪з┘Д┘В┘Е╪▒",
    Moonrise: "╪┤╪▒┘И┘В ╪з┘Д┘В┘Е╪▒",
    Moonset: "╪║╪▒┘И╪и ╪з┘Д┘В┘Е╪▒",
    CurrentWeatherFor: "╪з┘Д╪╖┘В╪│ ╪з┘Д╪н╪з┘Д┘К ┘Д┘А",
    Today: "╪з┘Д┘К┘И┘Е",
    Day: "╪з┘Д┘Ж┘З╪з╪▒",
    Night: "╪з┘Д┘Д┘К┘Д",
    MaxTemp: "╪г┘В╪╡┘Й ╪п╪▒╪м╪й ╪н╪▒╪з╪▒╪й",
    MinTemp: "╪г╪п┘Ж┘Й ╪п╪▒╪м╪й ╪н╪▒╪з╪▒╪й",
    AvgTemp: "┘Е╪к┘И╪│╪╖ ╪п╪▒╪м╪й ╪з┘Д╪н╪▒╪з╪▒╪й",
    chanceOfRain: "┘Б╪▒╪╡╪й ┘З╪╖┘И┘Д ╪з┘Д╪г┘Е╪╖╪з╪▒",
    chanceOfSnow: "┘Б╪▒╪╡╪й ╪к╪│╪з┘В╪╖ ╪з┘Д╪л┘Д┘И╪м"
  }
};

// --- Helper Functions ---

function translate(key, lang) {
  const currentLang = lang || languageSelect.value;
  return translations[currentLang]?.[key] || key;
}

function updateUIStrings() {
  const currentLang = languageSelect.value;
  document.querySelector('h1').textContent = translate('AppName', currentLang);
  locationInput.placeholder = translate('EnterCity', currentLang);
  document.querySelector('.controls button:nth-of-type(1)').textContent = translate('Search', currentLang);
  document.querySelector('.geobutton button').textContent = translate('UseMyLocation', currentLang);
  document.querySelector('.language-switch label').textContent = translate('Language', currentLang);
  document.querySelector('label[for="themeToggle"]').textContent = translate('DarkMode', currentLang);
  document.querySelector('label[for="unitToggle"]').textContent = translate('Units', currentLang);
  micBtn.textContent = translate('Voice', currentLang);
  // Re-render forecast headers if already displayed
  if (hourlyForecastResult.innerHTML) {
      hourlyForecastResult.querySelector('h3').textContent = `тП░ ${translate("HourlyForecast", currentLang)}`;
  }
  if (forecastResult.innerHTML) {
      forecastResult.querySelector('h3').textContent = `ЁЯФо ${translate("DayForecast", currentLang)}`;
  }
}

function showLoading() {
  loadingSpinner.style.display = "block";
  weatherResult.innerHTML = "";
  forecastResult.innerHTML = "";
  hourlyForecastResult.innerHTML = "";
}

function hideLoading() {
  loadingSpinner.style.display = "none";
}

function updateDateTime() {
  const now = new Date();
  datetimeEl.textContent = now.toLocaleString(languageSelect.value);
}
setInterval(updateDateTime, 1000);
updateDateTime();

// --- Weather Condition to Emoji Map ---
function getEmojiIcon(conditionCode, isDay) {
    const emojiMap = {
        1000: isDay ? 'тШАя╕П' : 'тнР', // Sunny / Clear (night)
        1003: isDay ? 'тЫЕ' : 'тШБя╕П', // Partly Cloudy / Partly Cloudy (night)
        1006: 'тШБя╕П', // Cloudy
        1009: 'тШБя╕П', // Overcast
        1030: 'ЁЯМля╕П', // Mist
        1135: 'ЁЯМля╕П', // Fog
        1147: 'ЁЯМля╕П', // Freezing fog
        1063: 'ЁЯМжя╕П', // Patchy rain possible
        1150: 'ЁЯМзя╕П', // Patchy light drizzle
        1153: 'ЁЯМзя╕П', // Light drizzle
        1180: 'ЁЯМзя╕П', // Patchy light rain
        1183: 'ЁЯМзя╕П', // Light rain
        1186: 'тШФ', // Moderate rain at times
        1189: 'тШФ', // Moderate rain
        1192: 'тЫИя╕П', // Heavy rain at times
        1195: 'тЫИя╕П', // Heavy rain
        1240: 'ЁЯТз', // Light rain shower
        1243: 'ЁЯТж', // Moderate or heavy rain shower
        1246: 'ЁЯТж', // Torrential rain shower
        1072: 'ЁЯзКЁЯМзя╕П', // Freezing drizzle possible
        1168: 'ЁЯзКЁЯМзя╕П', // Freezing drizzle
        1171: 'ЁЯзКЁЯМзя╕П', // Heavy freezing drizzle
        1198: 'ЁЯзКтШФ', // Light freezing rain
        1201: 'ЁЯзКтШФ', // Moderate or heavy freezing rain
        1204: 'ЁЯМия╕П', // Light sleet
        1207: 'ЁЯМия╕П', // Moderate or heavy sleet
        1249: 'ЁЯМия╕П', // Light sleet showers
        1252: 'ЁЯМия╕П', // Moderate or heavy sleet showers
        1114: 'ЁЯМмя╕ПтЭДя╕П', // Blowing snow
        1117: 'ЁЯМия╕П', // Blizzard
        1210: 'ЁЯМия╕П', // Patchy light snow
        1213: 'ЁЯМия╕П', // Light snow
        1216: 'ЁЯМия╕П', // Patchy moderate snow
        1219: 'ЁЯМия╕П', // Moderate snow
        1222: 'тЭДя╕П', // Patchy heavy snow
        1225: 'тЭДя╕П', // Heavy snow
        1255: 'тЭДя╕П', // Light snow showers
        1258: 'тЭДя╕П', // Moderate or heavy snow showers
        1237: 'ЁЯзК', // Ice pellets
        1261: 'ЁЯзК', // Light showers of ice pellets
        1264: 'ЁЯзК', // Moderate or heavy showers of ice pellets
        1087: 'тЪб', // Thundery outbreaks possible
        1273: 'тЫИя╕П', // Patchy light rain with thunder
        1276: 'тЫИя╕П', // Moderate or heavy rain with thunder
        1279: 'тЫИя╕П', // Patchy light snow with thunder
        1282: 'тЫИя╕П'  // Moderate or heavy snow with thunder
    };
    return emojiMap[conditionCode] || 'тЭУ';
}

// --- Text Color Based on Weather ---
function getTextColor(conditionCode, isDay, isDarkMode) {
  const colors = {
    day: {
      default: isDarkMode ? '#f0f0f0' : '#333',
      1000: isDarkMode ? '#FFFACD' : '#FFD700',
      1003: isDarkMode ? '#E0FFFF' : '#6A5ACD',
      1006: isDarkMode ? '#C0C0C0' : '#708090',
      1009: isDarkMode ? '#A9A9A9' : '#586270',
      1030: isDarkMode ? '#D3D3D3' : '#808080',
      1063: isDarkMode ? '#ADD8E6' : '#4682B4',
      1150: isDarkMode ? '#B0E0E6' : '#5F9EA0',
      1180: isDarkMode ? '#A9D8E6' : '#6495ED',
      1183: isDarkMode ? '#87CEFA' : '#4169E1',
      1186: isDarkMode ? '#6A8FBC' : '#36454F',
      1192: isDarkMode ? '#6A8FBC' : '#36454F',
      1195: isDarkMode ? '#6A8FBC' : '#36454F',
      1240: isDarkMode ? '#ADD8E6' : '#4682B4',
      1243: isDarkMode ? '#87CEFA' : '#4169E1',
      1246: isDarkMode ? '#6A8FBC' : '#36454F',
      1072: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1168: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1171: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1198: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1201: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1204: isDarkMode ? '#F0F8FF' : '#ADD8E6',
      1207: isDarkMode ? '#F0F8FF' : '#ADD8E6',
      1249: isDarkMode ? '#F0F8FF' : '#ADD8E6',
      1252: isDarkMode ? '#F0F8FF' : '#ADD8E6',
      1114: isDarkMode ? '#F8F8FF' : '#B0C4DE',
      1117: isDarkMode ? '#F0F8FF' : '#ADD8E6',
      1210: isDarkMode ? '#E0FFFF' : '#C6E2FF',
      1213: isDarkMode ? '#E0FFFF' : '#C6E2FF',
      1216: isDarkMode ? '#E0FFFF' : '#C6E2FF',
      1219: isDarkMode ? '#E0FFFF' : '#C6E2FF',
      1222: isDarkMode ? '#B0C4DE' : '#87CEEB',
      1225: isDarkMode ? '#B0C4DE' : '#87CEEB',
      1255: isDarkMode ? '#B0C4DE' : '#87CEEB',
      1258: isDarkMode ? '#B0C4DE' : '#87CEEB',
      1237: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1261: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1264: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1087: isDarkMode ? '#C2B280' : '#8B0000',
      1273: isDarkMode ? '#FF4500' : '#A52A2A',
      1276: isDarkMode ? '#FF4500' : '#A52A2A',
      1279: isDarkMode ? '#FF4500' : '#A52A2A',
      1282: isDarkMode ? '#FF4500' : '#A52A2A'
    },
    night: {
      default: isDarkMode ? '#f0f0f0' : '#333',
      1000: isDarkMode ? '#FFFACD' : '#FFD700',
      1003: isDarkMode ? '#E0FFFF' : '#6A5ACD',
      1006: isDarkMode ? '#C0C0C0' : '#708090',
      1009: isDarkMode ? '#A9A9A9' : '#586270',
      1030: isDarkMode ? '#D3D3D3' : '#808080',
      1063: isDarkMode ? '#ADD8E6' : '#4682B4',
      1150: isDarkMode ? '#B0E0E6' : '#5F9EA0',
      1180: isDarkMode ? '#A9D8E6' : '#6495ED',
      1183: isDarkMode ? '#87CEFA' : '#4169E1',
      1186: isDarkMode ? '#6A8FBC' : '#36454F',
      1192: isDarkMode ? '#6A8FBC' : '#36454F',
      1195: isDarkMode ? '#6A8FBC' : '#36454F',
      1240: isDarkMode ? '#ADD8E6' : '#4682B4',
      1243: isDarkMode ? '#87CEFA' : '#4169E1',
      1246: isDarkMode ? '#6A8FBC' : '#36454F',
      1072: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1168: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1171: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1198: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1201: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1204: isDarkMode ? '#F0F8FF' : '#ADD8E6',
      1207: isDarkMode ? '#F0F8FF' : '#ADD8E6',
      1249: isDarkMode ? '#F0F8FF' : '#ADD8E6',
      1252: isDarkMode ? '#F0F8FF' : '#ADD8E6',
      1114: isDarkMode ? '#F8F8FF' : '#B0C4DE',
      1117: isDarkMode ? '#F0F8FF' : '#ADD8E6',
      1210: isDarkMode ? '#E0FFFF' : '#C6E2FF',
      1213: isDarkMode ? '#E0FFFF' : '#C6E2FF',
      1216: isDarkMode ? '#E0FFFF' : '#C6E2FF',
      1219: isDarkMode ? '#E0FFFF' : '#C6E2FF',
      1222: isDarkMode ? '#B0C4DE' : '#87CEEB',
      1225: isDarkMode ? '#B0C4DE' : '#87CEEB',
      1255: isDarkMode ? '#B0C4DE' : '#87CEEB',
      1258: isDarkMode ? '#B0C4DE' : '#87CEEB',
      1237: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1261: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1264: isDarkMode ? '#E6E6FA' : '#6A5ACD',
      1087: isDarkMode ? '#C2B280' : '#8B0000',
      1273: isDarkMode ? '#FF4500' : '#A52A2A',
      1276: isDarkMode ? '#FF4500' : '#A52A2A',
      1279: isDarkMode ? '#FF4500' : '#A52A2A',
      1282: isDarkMode ? '#FF4500' : '#A52A2A'
    }
  };

  const timeOfDay = isDay ? 'day' : 'night';
  const selectedColors = colors[timeOfDay];
  return selectedColors[conditionCode] || selectedColors.default;
}

// --- Main Weather Functions ---

async function getWeather(city = null) {
  const location = city || locationInput.value;
  const language = languageSelect.value;
  const isFahrenheit = unitToggle.checked;
  const isDarkMode = themeToggle.checked;

  updateUIStrings();

  if (!location) {
    weatherResult.innerHTML = `<p>${translate("PleaseEnterCity", language)}</p>`;
    forecastResult.innerHTML = "";
    hourlyForecastResult.innerHTML = "";
    return;
  }

  showLoading();

  const url = `https://api.weatherapi.com/v1/forecast.json?key=${API_KEY}&q=${location}&days=7&aqi=no&alerts=no&lang=${language}`;

  try {
    const res = await fetch(url);
    const data = await res.json();
    hideLoading();

    if (data.error) {
      let errorMessage = data.error.message;
      const apiErrorTranslations = {
        "No matching location found.": "No matching location found.",
        "Parameter 'q' not provided.": "Please enter a city or use your location.",
      };
      errorMessage = apiErrorTranslations[errorMessage] ? translate(apiErrorTranslations[errorMessage], language) : errorMessage;

      weatherResult.innerHTML = `<p>тЭМ ${errorMessage}</p>`;
      forecastResult.innerHTML = "";
      hourlyForecastResult.innerHTML = "";
      return;
    }

    displayCurrentWeather(data, language, isFahrenheit, isDarkMode);
    displayHourlyForecast(data, language, isFahrenheit, isDarkMode);
    displayForecast(data, language, isFahrenheit, isDarkMode);

  } catch (error) {
    hideLoading();
    console.error("Error fetching weather data:", error);
    weatherResult.innerHTML = `<p>${translate("ErrorFetchingData", language)}</p>`;
    forecastResult.innerHTML = "";
    hourlyForecastResult.innerHTML = "";
  }
}

function displayCurrentWeather(data, language, isFahrenheit, isDarkMode) {
  const temp = isFahrenheit ? data.current.temp_f : data.current.temp_c;
  const unit = isFahrenheit ? "┬░F" : "┬░C";
  const feelsLike = isFahrenheit ? data.current.feelslike_f + unit : data.current.feelslike_c + unit;
  const condition = data.current.condition.text;
  const iconEmoji = getEmojiIcon(data.current.condition.code, data.current.is_day === 1);
  const textColor = getTextColor(data.current.condition.code, data.current.is_day === 1, isDarkMode);


  weatherResult.innerHTML = `
    <h2 style="color: ${textColor};">${translate("CurrentWeatherFor", language)} ${data.location.name}, ${data.location.country}</h2>
    <span class="main-icon" style="color: ${textColor};">${iconEmoji}</span>
    <p class="main-temp" style="color: ${textColor};">${temp}${unit}</p>
    <p style="color: ${textColor};">${translate("Condition", language)}: ${condition}</p>
    <p style="color: ${textColor};">${translate("FeelsLike", language)}: ${feelsLike}</p>
    <p style="color: ${textColor};">${translate("Humidity", language)}: ${data.current.humidity}%</p>
    <p style="color: ${textColor};">${translate("Wind", language)}: ${isFahrenheit ? data.current.wind_mph + ' mph' : data.current.wind_kph + ' kph'}</p>
    <p style="color: ${textColor};">${translate("Pressure", language)}: ${isFahrenheit ? data.current.pressure_in + ' in' : data.current.pressure_mb + ' mb'}</p>
    <p style="color: ${textColor};">${translate("Visibility", language)}: ${isFahrenheit ? data.current.vis_miles + ' miles' : data.current.vis_km + ' km'}</p>
    <p style="color: ${textColor};">${translate("UVIndex", language)}: ${data.current.uv}</p>
    <p style="color: ${textColor};">${translate("Sunrise", language)}: ${data.forecast.forecastday[0].astro.sunrise} | ${translate("Sunset", language)}: ${data.forecast.forecastday[0].astro.sunset}</p>
    <p style="color: ${textColor};">${translate("Moonrise", language)}: ${data.forecast.forecastday[0].astro.moonrise} | ${translate("Moonset", language)}: ${data.forecast.forecastday[0].astro.moonset}</p>
    <p style="color: ${textColor};">${translate("MoonPhase", language)}: ${data.forecast.forecastday[0].astro.moon_phase}</p>
  `;
}

function displayHourlyForecast(data, language, isFahrenheit, isDarkMode) {
  let hourlyHTML = `<h3 style="color: ${getTextColor(data.current.condition.code, data.current.is_day === 1, isDarkMode)};">тП░ ${translate("HourlyForecast", language)}</h3><div class="hourly-forecast-cards">`;
  const currentHour = new Date(data.location.localtime).getHours();

  const todayHourlyData = data.forecast.forecastday[0].hour;

  let upcomingHours = todayHourlyData.filter(h => {
    const hourTime = new Date(h.time_epoch * 1000).getHours();
    return hourTime >= currentHour;
  });

  if (upcomingHours.length < 24 && data.forecast.forecastday[1]) {
    const tomorrowHourlyData = data.forecast.forecastday[1].hour;
    upcomingHours.push(...tomorrowHourlyData.slice(0, 24 - upcomingHours.length));
  }

  upcomingHours.slice(0, 24).forEach(hourData => {
    const hour = new Date(hourData.time_epoch * 1000);
    const displayHour = hour.toLocaleString(language, { hour: 'numeric', hour12: true });
    const hourTemp = isFahrenheit ? hourData.temp_f + "┬░F" : hourData.temp_c + "┬░C";
    const iconEmoji = getEmojiIcon(hourData.condition.code, hourData.is_day === 1);
    const isToday = hour.getDate() === new Date(data.location.localtime).getDate();
    const dayLabel = isToday ? translate("Today", language) : hour.toLocaleDateString(language, { weekday: 'short' });
    const cardTextColor = getTextColor(hourData.condition.code, hourData.is_day === 1, isDarkMode);

    hourlyHTML += `
      <div class="hourly-card" style="color: ${cardTextColor};">
        <strong>${displayHour}</strong><br>
        <span class="icon-small">${iconEmoji}</span><br>
        ${hourTemp}<br>
        <small>${hourData.condition.text}</small><br>
        <small>${dayLabel}</small>
      </div>
    `;
  });
  hourlyHTML += `</div>`;
  hourlyForecastResult.innerHTML = hourlyHTML;
}

function displayForecast(data, language, isFahrenheit, isDarkMode) {
  let forecastHTML = `<h3 style="color: ${getTextColor(data.current.condition.code, data.current.is_day === 1, isDarkMode)};">ЁЯФо ${translate("DayForecast", language)}</h3><div class="daily-forecast-cards">`;
  data.forecast.forecastday.forEach((day, index) => {
    const dateObj = new Date(day.date);
    let dayLabel = dateObj.toLocaleDateString(language, { weekday: 'short', month: 'short', day: 'numeric' });
    if (index === 0) {
        dayLabel = translate("Today", language);
    }
    const maxTemp = isFahrenheit ? day.day.maxtemp_f + "┬░F" : day.day.maxtemp_c + "┬░C";
    const minTemp = isFahrenheit ? day.day.mintemp_f + "┬░F" : day.day.mintemp_c + "┬░C";
    const avgTemp = isFahrenheit ? day.day.avgtemp_f + "┬░F" : day.day.avgtemp_c + "┬░C";
    const condition = day.day.condition.text;
    const iconEmoji = getEmojiIcon(day.day.condition.code, true);
    const cardTextColor = getTextColor(day.day.condition.code, true, isDarkMode);

    forecastHTML += `
      <div class="daily-card" style="color: ${cardTextColor};">
        <strong>${dayLabel}</strong>
        <span class="icon-small">${iconEmoji}</span>
        <span class="temp-info">${condition}</span>
        <small>${translate("MaxTemp", language)}: ${maxTemp}</small>
        <small>${translate("MinTemp", language)}: ${minTemp}</small>
        <small>${translate("AvgTemp", language)}: ${avgTemp}</small>
        <small>${translate("chanceOfRain", language)}: ${day.day.daily_chance_of_rain}%</small>
        <small>${translate("chanceOfSnow", language)}: ${day.day.daily_chance_of_snow}%</small>
      </div>
    `;
  });
  forecastHTML += `</div>`;
  forecastResult.innerHTML = forecastHTML;
}

// --- Event Listeners ---

function toggleUnits() {
  getWeather();
}

function useGeolocation() {
  showLoading();
  const currentLang = languageSelect.value;
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(position => {
      const latlon = `${position.coords.latitude},${position.coords.longitude}`;
      getWeather(latlon);
    }, (error) => {
      hideLoading();
      weatherResult.innerHTML = `<p>${translate("GeolocationError", currentLang).replace('{error}', error.message)}</p>`;
      forecastResult.innerHTML = "";
      hourlyForecastResult.innerHTML = "";
    });
  } else {
    hideLoading();
    weatherResult.innerHTML = `<p>${translate("GeolocationNotSupported", currentLang)}</p>`;
    forecastResult.innerHTML = "";
    hourlyForecastResult.innerHTML = "";
  }
}

themeToggle.addEventListener("change", () => {
  document.body.classList.toggle("dark-mode", themeToggle.checked);
  // Re-fetch weather to update text colors based on dark mode state
  getWeather(locationInput.value || "Washim"); // Use Washim as default if no input
});

// Add ripple effect to all buttons
document.querySelectorAll('button').forEach(button => {
  button.addEventListener('click', function(e) {
    const rect = this.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    const x = e.clientX - rect.left - size / 2;
    const y = e.clientY - rect.top - size / 2;

    const ripple = document.createElement('span');
    ripple.classList.add('ripple');
    ripple.style.width = ripple.style.height = `${size}px`;
    ripple.style.left = `${x}px`;
    ripple.style.top = `${y}px`;

    this.appendChild(ripple);

    ripple.addEventListener('animationend', () => {
      this.removeChild(ripple);
    });
  });
});

micBtn.addEventListener("click", () => {
  const currentLang = languageSelect.value;
  if (!('SpeechRecognition' in window) && !('webkitSpeechRecognition' in window)) {
    weatherResult.innerHTML = `<p>${translate("VoiceInputNotSupported", currentLang)}</p╪з┘З╪▒╪й`;
    return;
  }

  const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
  recognition.lang = currentLang;
  recognition.interimResults = false;
  recognition.maxAlternatives = 1;

  micBtn.textContent = translate("Listening", currentLang);
  micBtn.disabled = true;

  recognition.start();

  recognition.onresult = event => {
    const transcript = event.results[0][0].transcript;
    locationInput.value = transcript;
    micBtn.textContent = translate("Voice", currentLang);
    micBtn.disabled = false;
    getWeather();
  };

  recognition.onspeechend = () => {
    recognition.stop();
    micBtn.textContent = translate("Voice", currentLang);
    micBtn.disabled = false;
  };

  recognition.onerror = (event) => {
    micBtn.textContent = translate("Voice", currentLang);
    micBtn.disabled = false;
    weatherResult.innerHTML = `<p>${translate("VoiceInputError", currentLang).replace('{error}', event.error)}</p>`;
  };
});

languageSelect.addEventListener("change", () => {
    getWeather();
    updateUIStrings();
    updateDateTime();
});

unitToggle.addEventListener("change", toggleUnits);

document.addEventListener("DOMContentLoaded", () => {
    updateUIStrings();
    getWeather("Washim"); // Default city set to Washim
});